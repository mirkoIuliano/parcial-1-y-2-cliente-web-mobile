rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // match /{document=**} {
    //   allow read, write: if true;
    //   // allow read, write: if request.time < timestamp.date(2024, 12, 18);
    // }
    
    // Reglas para los posteos
    // Para leer: El usuario debe estar autenticado
    // Para crear: El usuario debe estar autenticado 
    // y ser el mirmo que firma el posteo
		// Para actualizar: Debe estar autenticado y ser el mismo que 
		// firma
    match /public-posts/{publicaciones} {
    	allow read: if request.auth != null;
      allow create: if 
      	request.auth != null &&
        // acá verificamos que sea el mismo que firma el posteo
        request.auth.uid == request.resource.data.user_id 
      allow update: if
      	request.auth != null
    }
    
    // Reglas para el perfil de usuarios
    // Para leer: el usuario debe estar autenticado
    // Para crear: el usuario debe estar autenticado y estar creando
    // SU perfil. Si soy el user qwe solo debería poder crear el
    // documento "qwe" 
    // Para actualizarlo: que el usuario esté autenticado y que el uid 
    // del usuario sea el id del docuemtno que está editando (osea las 
    // mismas reglas que el create) => por lo cual los vamos a hacer juntos
    match /users/{user} {
    	allow read: if request.auth != null;
      allow create, update: if 
      	request.auth != null &&
        // verificamos que el uid del usuario autenticado sea igual al 
        // user (los document de la collection 'users' tienen como 
        // id, el uid del usuario del cual contienen los datos)
        request.auth.uid == user // 'user' viene del {user} 
        												 // de match /users/{user}
    }
    
    // Reglas para los documentos del chat privado
    // Para leer: El usuario debe estar autenticada y que sea parte de la
    // Para crear: Debe estar autenticado y que sea parte de la conversación.
    // Parece igual que el leer, pero resource no está disponible en create
    match /private-chats/{chat} {
    	allow read: if 
      	request.auth != null &&
        // preguntamos si el uid del usuario autenticado está dentro de 
        // resource.data.users
        // resource es algo que está disponible en todas las peticiones
        // que no sean create y es la data del documento que existe
        request.auth.uid in resource.data.users;
      allow create: if
      	request.auth != null &&
        request.auth.uid in request.resource.data.users;
        
      // Reglas par los mensajes del chat (lo de antes eran los
      // docuemntos del chat privado)
      // Para leer: msgs de la conversación: que sean autenticados y
      // que el usuario sea uno de los dos que está en la conversación
      // Para crear: tiene que estar autenticado, que sea parte de la 
      // conversación y ser el que firma el mensaje
      match /messages/{message} {
      	allow read: if 
          request.auth != null &&
        	request.auth.uid in get(/databases/$(database)/documents/private-chats/$(chat)).data.users;
        allow create: if 
          request.auth != null &&
        	request.auth.uid in get(/databases/$(database)/documents/private-chats/$(chat)).data.users &&
          request.auth.uid == request.resource.data.user_id;
      }
    }
    // Para la regla de los mensajes de chat, como los mensajes son
    // una subcolección hay 2 maneras en las que las puedo definir
    // 1. Creando otro match así:
    // match /private-chats/{chat}/messages/{message} {}
    // 2. Otra es dentro del match /private-chats/{chat} añadir dentro
    // match /private-chats/{chat} y así anidarlo
  }
}